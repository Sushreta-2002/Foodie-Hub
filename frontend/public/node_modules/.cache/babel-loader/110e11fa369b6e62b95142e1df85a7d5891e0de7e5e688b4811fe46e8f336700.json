{"ast":null,"code":"// import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// const CartContext =createContext(null);\n// const CART_KEY = 'cart';\n// const EMPTY_CART = {\n//   items: [],\n//   totalPrice: 0,\n//   totalCount: 0,\n// };\n\n// export default function CartProvider({children}) {\n//   const initCart = getCartFromLocalStorage();\n//     const[cartItems, setCartItems]= useState(initCart.items);\n//     const[totalPrice, setTotalPrice] =useState(initCart.totalPrice);\n//     const[totalCount, setTotalCount]=useState(initCart.totalCount);\n\n//     useEffect(() => {\n//       const totalPrice = sum(cartItems.map(item => item.price));\n//       const totalCount = sum(cartItems.map(item => item.quantity));\n//       setTotalPrice(totalPrice);\n//       setTotalCount(totalCount);\n//       localStorage.setItem(\n//       CART_KEY,\n//       JSON.stringify({\n//         items: cartItems,\n//         totalPrice,\n//         totalCount,\n//       })\n//     );\n//     }, [cartItems]);\n\n//     function getCartFromLocalStorage(){\n//       const storedCart =localStorage.getItem(CART_KEY);\n//       return storedCart ? JSON.parse(storedCart) : EMPTY_CART;\n//     }\n\n//     const sum= items =>{\n//       return items.reduce((prevValue, curValue) => prevValue + curValue, 0);\n//     };\n\n//     const removeFromCart =foodId =>{\n//       const filteredCartItems= cartItems.filter(item => item.food.id !== foodId);\n//       setCartItems(filteredCartItems);\n//     };\n\n//     const changeQuantity =(cartItem, newQuantity) =>{\n//       const {food} = cartItem;\n//       const changedCartItem ={\n//         ...cartItem,\n//         quantity : newQuantity,\n//         price: food.price * newQuantity,\n//       };\n//       setCartItems(\n//         cartItems.map(item => (item.food.id === food.id ? changedCartItem : item))\n//       );\n//     };\n\n//     const addToCart = food => {\n//       const cartItem = cartItems.find(item => item.food.id === food.id);\n//       if(cartItem){\n//         changeQuantity(cartItem, cartItem.quantity + 1);\n//       } else{\n//         setCartItems([...cartItems, { food, quantity: 1, price: food.price}]);\n//       }\n//     };\n\n//   return( <CartContext.Provider\n//    value={{cart:{items : cartItems,totalPrice, totalCount},\n//    removeFromCart,\n//    changeQuantity,\n//    addToCart }}>\n//     {children}\n//   </CartContext.Provider>\n//   );\n// }\n// export const useCart = () => useContext(CartContext);","map":{"version":3,"names":[],"sources":["D:/Food-order/frontend/src/hooks/useCart.js"],"sourcesContent":["// import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\n\r\n// const CartContext =createContext(null);\r\n// const CART_KEY = 'cart';\r\n// const EMPTY_CART = {\r\n//   items: [],\r\n//   totalPrice: 0,\r\n//   totalCount: 0,\r\n// };\r\n\r\n\r\n// export default function CartProvider({children}) {\r\n//   const initCart = getCartFromLocalStorage();\r\n//     const[cartItems, setCartItems]= useState(initCart.items);\r\n//     const[totalPrice, setTotalPrice] =useState(initCart.totalPrice);\r\n//     const[totalCount, setTotalCount]=useState(initCart.totalCount);\r\n\r\n//     useEffect(() => {\r\n//       const totalPrice = sum(cartItems.map(item => item.price));\r\n//       const totalCount = sum(cartItems.map(item => item.quantity));\r\n//       setTotalPrice(totalPrice);\r\n//       setTotalCount(totalCount);\r\n//       localStorage.setItem(\r\n//       CART_KEY,\r\n//       JSON.stringify({\r\n//         items: cartItems,\r\n//         totalPrice,\r\n//         totalCount,\r\n//       })\r\n//     );\r\n//     }, [cartItems]);\r\n\r\n//     function getCartFromLocalStorage(){\r\n//       const storedCart =localStorage.getItem(CART_KEY);\r\n//       return storedCart ? JSON.parse(storedCart) : EMPTY_CART;\r\n//     }\r\n\r\n//     const sum= items =>{\r\n//       return items.reduce((prevValue, curValue) => prevValue + curValue, 0);\r\n//     };\r\n\r\n//     const removeFromCart =foodId =>{\r\n//       const filteredCartItems= cartItems.filter(item => item.food.id !== foodId);\r\n//       setCartItems(filteredCartItems);\r\n//     };\r\n\r\n//     const changeQuantity =(cartItem, newQuantity) =>{\r\n//       const {food} = cartItem;\r\n//       const changedCartItem ={\r\n//         ...cartItem,\r\n//         quantity : newQuantity,\r\n//         price: food.price * newQuantity,\r\n//       };\r\n//       setCartItems(\r\n//         cartItems.map(item => (item.food.id === food.id ? changedCartItem : item))\r\n//       );\r\n//     };\r\n\r\n//     const addToCart = food => {\r\n//       const cartItem = cartItems.find(item => item.food.id === food.id);\r\n//       if(cartItem){\r\n//         changeQuantity(cartItem, cartItem.quantity + 1);\r\n//       } else{\r\n//         setCartItems([...cartItems, { food, quantity: 1, price: food.price}]);\r\n//       }\r\n//     };\r\n\r\n//   return( <CartContext.Provider\r\n//    value={{cart:{items : cartItems,totalPrice, totalCount},\r\n//    removeFromCart,\r\n//    changeQuantity,\r\n//    addToCart }}>\r\n//     {children}\r\n//   </CartContext.Provider>\r\n//   );\r\n// }\r\n// export const useCart = () => useContext(CartContext);"],"mappings":"AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}